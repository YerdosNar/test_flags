	.file	"matrix_bench.c"
	.text
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC0:
	.string	"Failed to allocate memory for matrix rows"
	.align 8
.LC1:
	.string	"Failed to allocate memory for matrix columns"
	.text
	.globl	create_matrix
	.type	create_matrix, @function
create_matrix:
.LFB22:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movl	$800, %edi
	call	malloc@PLT
	testq	%rax, %rax
	je	.L7
	movq	%rax, %r12
	movq	%rax, %rbx
	leaq	800(%rax), %rbp
.L4:
	movl	$800, %edi
	call	malloc@PLT
	movq	%rax, (%rbx)
	testq	%rax, %rax
	je	.L8
	addq	$8, %rbx
	cmpq	%rbp, %rbx
	jne	.L4
	movq	%r12, %rax
	movl	$0, %edx
	movq	%rdx, %rcx
	movabsq	$-4294967296, %rsi
	andq	%rsi, %rcx
	orq	$100, %rcx
	movl	%ecx, %ecx
	movabsq	$429496729600, %rsi
	orq	%rsi, %rcx
	movq	%rcx, %rdx
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
.L7:
	.cfi_restore_state
	leaq	.LC0(%rip), %rdi
	call	perror@PLT
	movl	$1, %edi
	call	exit@PLT
.L8:
	leaq	.LC1(%rip), %rdi
	call	perror@PLT
	movl	$1, %edi
	call	exit@PLT
	.cfi_endproc
.LFE22:
	.size	create_matrix, .-create_matrix
	.globl	free_matrix
	.type	free_matrix, @function
free_matrix:
.LFB23:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L15
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movq	%rdi, %r12
	testl	%esi, %esi
	jle	.L11
	movq	%rdi, %rbx
	movslq	%esi, %rsi
	leaq	(%rdi,%rsi,8), %rbp
.L12:
	movq	(%rbx), %rdi
	call	free@PLT
	addq	$8, %rbx
	cmpq	%rbp, %rbx
	jne	.L12
.L11:
	movq	%r12, %rdi
	call	free@PLT
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
.L15:
	.cfi_restore 3
	.cfi_restore 6
	.cfi_restore 12
	ret
	.cfi_endproc
.LFE23:
	.size	free_matrix, .-free_matrix
	.globl	init_matrix_rand
	.type	init_matrix_rand, @function
init_matrix_rand:
.LFB24:
	.cfi_startproc
	testl	%esi, %esi
	jle	.L27
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$8, %rsp
	.cfi_def_cfa_offset 64
	movq	%rdi, %r13
	movq	%rsi, %r12
	sarq	$32, %r12
	movl	%r12d, %r15d
	movslq	%esi, %rsi
	leaq	0(,%rsi,8), %r14
	salq	$3, %r12
	movl	$0, %ebp
	jmp	.L20
.L21:
	call	rand@PLT
	movq	0(%rbp,%r13), %rdx
	vxorpd	%xmm1, %xmm1, %xmm1
	vcvtsi2sdl	%eax, %xmm1, %xmm0
	vdivsd	.LC2(%rip), %xmm0, %xmm0
	vmovsd	%xmm0, (%rdx,%rbx)
	addq	$8, %rbx
	cmpq	%r12, %rbx
	jne	.L21
.L22:
	addq	$8, %rbp
	cmpq	%rbp, %r14
	je	.L18
.L20:
	movl	$0, %ebx
	testl	%r15d, %r15d
	jg	.L21
	jmp	.L22
.L18:
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L27:
	.cfi_restore 3
	.cfi_restore 6
	.cfi_restore 12
	.cfi_restore 13
	.cfi_restore 14
	.cfi_restore 15
	ret
	.cfi_endproc
.LFE24:
	.size	init_matrix_rand, .-init_matrix_rand
	.section	.rodata.str1.8
	.align 8
.LC3:
	.string	"Matrix dimension mismatch for multiplication.\n"
	.text
	.globl	multiply
	.type	multiply, @function
multiply:
.LFB25:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	movq	%rdi, 8(%rsp)
	movq	%rsi, %rbx
	sarq	$32, %rbx
	cmpl	%ecx, %ebx
	jne	.L45
	movq	%rsi, %r15
	movq	%rdx, %rbp
	movq	%rcx, %r12
	movl	%ebx, %r13d
	sarq	$32, %r12
	movl	%r12d, %r14d
	call	create_matrix
	movq	%rdx, %rdi
	testl	%r15d, %r15d
	jle	.L32
	movq	%rax, %rsi
	movq	8(%rsp), %r9
	movslq	%r15d, %r15
	leaq	(%rax,%r15,8), %rdx
	salq	$3, %r12
	salq	$3, %rbx
	movq	%rax, %rcx
	jmp	.L33
.L45:
	movq	stderr(%rip), %rcx
	movl	$46, %edx
	movl	$1, %esi
	leaq	.LC3(%rip), %rdi
	call	fwrite@PLT
	movl	$1, %edi
	call	exit@PLT
.L36:
	movq	%rsi, %r15
	movq	(%rsi), %rax
	movq	$0x000000000, (%rax,%r8)
	testl	%r13d, %r13d
	jle	.L34
	movl	$0, %eax
	movl	%r14d, %r11d
	.p2align 6
.L35:
	movq	%r8, %r10
	addq	(%r15), %r10
	movq	(%r9), %r14
	vmovsd	(%r14,%rax), %xmm0
	movq	0(%rbp,%rax), %r14
	vmulsd	(%r14,%r8), %xmm0, %xmm0
	vaddsd	(%r10), %xmm0, %xmm0
	vmovsd	%xmm0, (%r10)
	addq	$8, %rax
	cmpq	%rbx, %rax
	jne	.L35
	movl	%r11d, %r14d
.L34:
	addq	$8, %r8
	cmpq	%r8, %r12
	jne	.L36
.L37:
	addq	$8, %rsi
	addq	$8, %r9
	cmpq	%rdx, %rsi
	je	.L42
.L33:
	movl	$0, %r8d
	testl	%r14d, %r14d
	jg	.L36
	jmp	.L37
.L42:
	movq	%rcx, %rax
.L32:
	movq	%rdi, %rdx
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE25:
	.size	multiply, .-multiply
	.section	.rodata.str1.8
	.align 8
.LC6:
	.string	"Execution time: %-4.5f seconds\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB26:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	movq	%fs:40, %rax
	movq	%rax, 40(%rsp)
	xorl	%eax, %eax
	movl	$0, %edi
	call	time@PLT
	movl	%eax, %edi
	call	srand@PLT
	call	create_matrix
	movq	%rax, %r13
	movq	%rdx, %r12
	call	create_matrix
	movq	%rax, %rbp
	movq	%rdx, %rbx
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	init_matrix_rand
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	call	init_matrix_rand
	movq	%rsp, %rsi
	movl	$1, %edi
	call	clock_gettime@PLT
	movq	%rbp, %rdx
	movq	%rbx, %rcx
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	multiply
	movq	%rax, %r15
	movq	%rdx, %r14
	leaq	16(%rsp), %rsi
	movl	$1, %edi
	call	clock_gettime@PLT
	movq	24(%rsp), %rax
	subq	8(%rsp), %rax
	vxorpd	%xmm2, %xmm2, %xmm2
	vcvtsi2sdq	%rax, %xmm2, %xmm0
	vdivsd	.LC5(%rip), %xmm0, %xmm0
	movq	16(%rsp), %rax
	subq	(%rsp), %rax
	vcvtsi2sdq	%rax, %xmm2, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	leaq	.LC6(%rip), %rdi
	movl	$1, %eax
	call	printf@PLT
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	free_matrix
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	call	free_matrix
	movq	%r15, %rdi
	movq	%r14, %rsi
	call	free_matrix
	movq	40(%rsp), %rax
	subq	%fs:40, %rax
	jne	.L49
	movl	$0, %eax
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L49:
	.cfi_restore_state
	call	__stack_chk_fail@PLT
	.cfi_endproc
.LFE26:
	.size	main, .-main
	.section	.rodata.cst8,"aM",@progbits,8
	.align 8
.LC2:
	.long	-4194304
	.long	1105199103
	.align 8
.LC5:
	.long	0
	.long	1104006501
	.ident	"GCC: (GNU) 15.2.1 20250813"
	.section	.note.GNU-stack,"",@progbits
