	.file	"matrix_bench.c"
	.text
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC0:
	.string	"Failed to allocate memory for matrix rows"
	.align 8
.LC1:
	.string	"Failed to allocate memory for matrix columns"
	.section	.text.unlikely,"ax",@progbits
.LCOLDB2:
	.text
.LHOTB2:
	.p2align 4
	.globl	create_matrix
	.type	create_matrix, @function
create_matrix:
.LFB22:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movl	$800, %edi
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	call	malloc@PLT
	testq	%rax, %rax
	je	.L6
	movq	%rax, %r12
	movq	%rax, %rbx
	leaq	800(%rax), %rbp
	.p2align 4
	.p2align 3
.L4:
	movl	$800, %edi
	call	malloc@PLT
	movq	%rax, (%rbx)
	testq	%rax, %rax
	je	.L7
	addq	$8, %rbx
	cmpq	%rbp, %rbx
	jne	.L4
	movabsq	$429496729700, %rdx
	movq	%r12, %rax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
	.section	.text.unlikely
	.cfi_startproc
	.type	create_matrix.cold, @function
create_matrix.cold:
.LFSB22:
.L6:
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	.cfi_offset 6, -24
	.cfi_offset 12, -16
	leaq	.LC0(%rip), %rdi
	call	perror@PLT
	movl	$1, %edi
	call	exit@PLT
.L7:
	leaq	.LC1(%rip), %rdi
	call	perror@PLT
	movl	$1, %edi
	call	exit@PLT
	.cfi_endproc
.LFE22:
	.text
	.size	create_matrix, .-create_matrix
	.section	.text.unlikely
	.size	create_matrix.cold, .-create_matrix.cold
.LCOLDE2:
	.text
.LHOTE2:
	.p2align 4
	.globl	free_matrix
	.type	free_matrix, @function
free_matrix:
.LFB23:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L10
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rdi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	testl	%esi, %esi
	jle	.L12
	movslq	%esi, %rsi
	movq	%rdi, %rbx
	leaq	(%rdi,%rsi,8), %rbp
	.p2align 4
	.p2align 3
.L13:
	movq	(%rbx), %rdi
	addq	$8, %rbx
	call	free@PLT
	cmpq	%rbp, %rbx
	jne	.L13
.L12:
	popq	%rbx
	.cfi_restore 3
	.cfi_def_cfa_offset 24
	movq	%r12, %rdi
	popq	%rbp
	.cfi_restore 6
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_restore 12
	.cfi_def_cfa_offset 8
	jmp	free@PLT
	.p2align 4,,10
	.p2align 3
.L10:
	ret
	.cfi_endproc
.LFE23:
	.size	free_matrix, .-free_matrix
	.p2align 4
	.globl	init_matrix_rand
	.type	init_matrix_rand, @function
init_matrix_rand:
.LFB24:
	.cfi_startproc
	testl	%esi, %esi
	jle	.L28
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movq	%rsi, %rbp
	movslq	%esi, %rsi
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	sarq	$32, %rbp
	leaq	0(,%rsi,8), %r13
	subq	$8, %rsp
	.cfi_def_cfa_offset 64
	testl	%ebp, %ebp
	jle	.L23
	movq	%rdi, %r14
	salq	$3, %rbp
	xorl	%r12d, %r12d
	.p2align 4
	.p2align 3
.L22:
	leaq	(%r12,%r14), %r15
	xorl	%ebx, %ebx
	.p2align 4
	.p2align 3
.L21:
	call	rand@PLT
	movq	(%r15), %rdx
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%eax, %xmm0
	divsd	.LC3(%rip), %xmm0
	movsd	%xmm0, (%rdx,%rbx)
	addq	$8, %rbx
	cmpq	%rbx, %rbp
	jne	.L21
	addq	$8, %r12
	cmpq	%r12, %r13
	jne	.L22
.L18:
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L28:
	.cfi_restore 3
	.cfi_restore 6
	.cfi_restore 12
	.cfi_restore 13
	.cfi_restore 14
	.cfi_restore 15
	ret
.L23:
	.cfi_def_cfa_offset 64
	.cfi_offset 3, -56
	.cfi_offset 6, -48
	.cfi_offset 12, -40
	.cfi_offset 13, -32
	.cfi_offset 14, -24
	.cfi_offset 15, -16
	xorl	%eax, %eax
	.p2align 5
	.p2align 4
	.p2align 3
.L20:
	leaq	8(%rax), %rdx
	cmpq	%r13, %rdx
	je	.L18
	addq	$16, %rax
	cmpq	%rax, %r13
	jne	.L20
	jmp	.L18
	.cfi_endproc
.LFE24:
	.size	init_matrix_rand, .-init_matrix_rand
	.section	.rodata.str1.8
	.align 8
.LC5:
	.string	"Matrix dimension mismatch for multiplication.\n"
	.text
	.p2align 4
	.globl	multiply
	.type	multiply, @function
multiply:
.LFB25:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movq	%rsi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	sarq	$32, %r12
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	cmpl	%ecx, %r12d
	jne	.L55
	sarq	$32, %rcx
	movq	%rdi, %rbp
	movq	%rsi, %r14
	movq	%rdx, %rbx
	movq	%rcx, %r15
	call	create_matrix
	movq	%rax, %r13
	movq	%rdx, %rcx
	testl	%r14d, %r14d
	jle	.L33
	movq	%r15, 8(%rsp)
	movslq	%r14d, %r11
	leaq	0(,%r12,8), %r8
	xorl	%edx, %edx
	salq	$3, %r11
	leaq	0(,%r15,8), %r14
.L34:
	movl	8(%rsp), %eax
	testl	%eax, %eax
	jle	.L43
	.p2align 4
	.p2align 3
.L44:
	movq	0(%r13,%rdx), %rdi
	movq	$0x000000000, (%rdi)
	movq	%rdi, %r10
	leaq	(%r14,%rdi), %r15
	testl	%r12d, %r12d
	jle	.L56
	movq	0(%rbp,%rdx), %r9
	xorl	%esi, %esi
	.p2align 4
	.p2align 3
.L35:
	movq	%rdx, (%rsp)
	xorl	%eax, %eax
	pxor	%xmm1, %xmm1
	.p2align 5
	.p2align 4
	.p2align 3
.L41:
	movq	(%rbx,%rax), %rdx
	movsd	(%rdx,%rsi), %xmm0
	mulsd	(%r9,%rax), %xmm0
	addq	$8, %rax
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdi)
	cmpq	%rax, %r8
	jne	.L41
	addq	$8, %r10
	movq	(%rsp), %rdx
	cmpq	%r10, %r15
	je	.L40
	movq	$0x000000000, (%r10)
	addq	$8, %rsi
	movq	%r10, %rdi
	jmp	.L35
.L56:
	leaq	8(%r10), %rax
	cmpq	%r15, %rax
	je	.L40
.L36:
	movq	$0x000000000, 8(%r10)
	addq	$16, %r10
	cmpq	%r10, %r15
	je	.L38
	leaq	8(%r10), %rax
	movq	$0x000000000, (%r10)
	cmpq	%r15, %rax
	jne	.L36
	.p2align 4
	.p2align 3
.L40:
	addq	$8, %rdx
	cmpq	%rdx, %r11
	jne	.L44
.L33:
	addq	$24, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movq	%r13, %rax
	movq	%rcx, %rdx
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L43:
	.cfi_restore_state
	leaq	8(%rdx), %rax
	cmpq	%r11, %rax
	je	.L33
	addq	$16, %rdx
	cmpq	%rdx, %r11
	jne	.L43
	jmp	.L33
.L55:
	movq	stderr(%rip), %rcx
	movl	$46, %edx
	movl	$1, %esi
	leaq	.LC5(%rip), %rdi
	call	fwrite@PLT
	movl	$1, %edi
	call	exit@PLT
.L38:
	addq	$8, %rdx
	cmpq	%r11, %rdx
	jne	.L34
	jmp	.L33
	.cfi_endproc
.LFE25:
	.size	multiply, .-multiply
	.section	.rodata.str1.8
	.align 8
.LC7:
	.string	"Execution time: %-4.5f seconds\n"
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB26:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	movq	%fs:40, %rdi
	movq	%rdi, 40(%rsp)
	xorl	%edi, %edi
	call	time@PLT
	movl	%eax, %edi
	call	srand@PLT
	call	create_matrix
	movq	%rax, %r13
	movq	%rdx, %r12
	call	create_matrix
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rbp
	call	init_matrix_rand
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	call	init_matrix_rand
	movq	%rsp, %rsi
	movl	$1, %edi
	call	clock_gettime@PLT
	movq	%rbx, %rcx
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%rbp, %rdx
	call	multiply
	leaq	16(%rsp), %rsi
	movl	$1, %edi
	movq	%rdx, %r14
	movq	%rax, %r15
	call	clock_gettime@PLT
	movq	24(%rsp), %rax
	pxor	%xmm0, %xmm0
	subq	8(%rsp), %rax
	cvtsi2sdq	%rax, %xmm0
	pxor	%xmm1, %xmm1
	movq	16(%rsp), %rax
	subq	(%rsp), %rax
	cvtsi2sdq	%rax, %xmm1
	divsd	.LC6(%rip), %xmm0
	addsd	%xmm1, %xmm0
	leaq	.LC7(%rip), %rdi
	movl	$1, %eax
	call	printf@PLT
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	free_matrix
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	call	free_matrix
	movq	%r15, %rdi
	movq	%r14, %rsi
	call	free_matrix
	movq	40(%rsp), %rax
	subq	%fs:40, %rax
	jne	.L60
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L60:
	.cfi_restore_state
	call	__stack_chk_fail@PLT
	.cfi_endproc
.LFE26:
	.size	main, .-main
	.section	.rodata.cst8,"aM",@progbits,8
	.align 8
.LC3:
	.long	-4194304
	.long	1105199103
	.align 8
.LC6:
	.long	0
	.long	1104006501
	.ident	"GCC: (GNU) 15.2.1 20250813"
	.section	.note.GNU-stack,"",@progbits
