	.file	"matrix_bench.c"
	.text
	.section	.rodata
	.align 8
.LC0:
	.string	"Failed to allocate memory for matrix rows"
	.align 8
.LC1:
	.string	"Failed to allocate memory for matrix columns"
	.text
	.globl	create_matrix
	.type	create_matrix, @function
create_matrix:
.LFB6:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset 3, -24
	movl	$100, -24(%rbp)
	movl	$100, -20(%rbp)
	movl	$800, %edi
	call	malloc@PLT
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2
	leaq	.LC0(%rip), %rax
	movq	%rax, %rdi
	call	perror@PLT
	movl	$1, %edi
	call	exit@PLT
.L2:
	movl	$0, -36(%rbp)
	jmp	.L3
.L5:
	movq	-32(%rbp), %rdx
	movl	-36(%rbp), %eax
	cltq
	salq	$3, %rax
	leaq	(%rdx,%rax), %rbx
	movl	$800, %edi
	call	malloc@PLT
	movq	%rax, (%rbx)
	movq	-32(%rbp), %rdx
	movl	-36(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L4
	leaq	.LC1(%rip), %rax
	movq	%rax, %rdi
	call	perror@PLT
	movl	$1, %edi
	call	exit@PLT
.L4:
	incl	-36(%rbp)
.L3:
	cmpl	$99, -36(%rbp)
	jle	.L5
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	create_matrix, .-create_matrix
	.globl	free_matrix
	.type	free_matrix, @function
free_matrix:
.LFB7:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, %rax
	movl	$0, %edx
	movq	%rcx, %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	je	.L12
	movl	$0, -4(%rbp)
	jmp	.L10
.L11:
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	free@PLT
	incl	-4(%rbp)
.L10:
	movl	-24(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L11
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	free@PLT
	jmp	.L7
.L12:
	nop
.L7:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	free_matrix, .-free_matrix
	.globl	init_matrix_rand
	.type	init_matrix_rand, @function
init_matrix_rand:
.LFB8:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, %rax
	movl	$0, %edx
	movq	%rcx, %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L14
.L17:
	movl	$0, -4(%rbp)
	jmp	.L15
.L16:
	call	rand@PLT
	vcvtsi2sdl	%eax, %xmm0, %xmm0
	movq	-32(%rbp), %rdx
	movl	-8(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	vmovsd	.LC2(%rip), %xmm1
	vdivsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	incl	-4(%rbp)
.L15:
	movl	-20(%rbp), %eax
	cmpl	%eax, -4(%rbp)
	jl	.L16
	incl	-8(%rbp)
.L14:
	movl	-24(%rbp), %eax
	cmpl	%eax, -8(%rbp)
	jl	.L17
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	init_matrix_rand, .-init_matrix_rand
	.section	.rodata
	.align 8
.LC3:
	.string	"Matrix dimension mismatch for multiplication.\n"
	.text
	.globl	multiply
	.type	multiply, @function
multiply:
.LFB9:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rsi, %rax
	movq	%rdi, %rsi
	movl	$0, %edi
	movq	%rax, %rdi
	movq	%rsi, -48(%rbp)
	movq	%rdi, -40(%rbp)
	movq	%rdx, -64(%rbp)
	movq	%rcx, -56(%rbp)
	movl	-36(%rbp), %edx
	movl	-56(%rbp), %eax
	cmpl	%eax, %edx
	je	.L19
	movq	stderr(%rip), %rdx
	leaq	.LC3(%rip), %rax
	movq	%rdx, %rcx
	movl	$46, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	fwrite@PLT
	movl	$1, %edi
	call	exit@PLT
.L19:
	call	create_matrix
	movq	%rax, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L20
.L25:
	movl	$0, -24(%rbp)
	jmp	.L21
.L24:
	movq	-16(%rbp), %rdx
	movl	-28(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movl	-24(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	vxorpd	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	movl	$0, -20(%rbp)
	jmp	.L22
.L23:
	movq	-16(%rbp), %rdx
	movl	-28(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movl	-24(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	vmovsd	(%rax), %xmm1
	movq	-48(%rbp), %rdx
	movl	-28(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movl	-20(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	vmovsd	(%rax), %xmm2
	movq	-64(%rbp), %rdx
	movl	-20(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movl	-24(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	vmovsd	(%rax), %xmm0
	vmulsd	%xmm0, %xmm2, %xmm0
	movq	-16(%rbp), %rdx
	movl	-28(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movl	-24(%rbp), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	vaddsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, (%rax)
	incl	-20(%rbp)
.L22:
	movl	-36(%rbp), %eax
	cmpl	%eax, -20(%rbp)
	jl	.L23
	incl	-24(%rbp)
.L21:
	movl	-52(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	jl	.L24
	incl	-28(%rbp)
.L20:
	movl	-40(%rbp), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L25
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	multiply, .-multiply
	.section	.rodata
	.align 8
.LC6:
	.string	"Execution time: %-4.5f seconds\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB10:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$0, %edi
	call	time@PLT
	movl	%eax, %edi
	call	srand@PLT
	call	create_matrix
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	call	create_matrix
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	init_matrix_rand
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	init_matrix_rand
	leaq	-64(%rbp), %rax
	movq	%rax, %rsi
	movl	$1, %edi
	call	clock_gettime@PLT
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	-96(%rbp), %rdi
	movq	-88(%rbp), %rsi
	movq	%rdx, %rcx
	movq	%rax, %rdx
	call	multiply
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rsi
	movl	$1, %edi
	call	clock_gettime@PLT
	movq	-48(%rbp), %rdx
	movq	-64(%rbp), %rax
	subq	%rax, %rdx
	vcvtsi2sdq	%rdx, %xmm1, %xmm1
	movq	-40(%rbp), %rdx
	movq	-56(%rbp), %rax
	subq	%rax, %rdx
	vcvtsi2sdq	%rdx, %xmm0, %xmm0
	vmovsd	.LC5(%rip), %xmm2
	vdivsd	%xmm2, %xmm0, %xmm0
	vaddsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -104(%rbp)
	movq	-104(%rbp), %rax
	leaq	.LC6(%rip), %rdx
	vmovq	%rax, %xmm0
	movq	%rdx, %rdi
	movl	$1, %eax
	call	printf@PLT
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	free_matrix
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	free_matrix
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	call	free_matrix
	movl	$0, %eax
	movq	-8(%rbp), %rdx
	subq	%fs:40, %rdx
	je	.L29
	call	__stack_chk_fail@PLT
.L29:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	main, .-main
	.section	.rodata
	.align 8
.LC2:
	.long	-4194304
	.long	1105199103
	.align 8
.LC5:
	.long	0
	.long	1104006501
	.ident	"GCC: (GNU) 15.2.1 20250813"
	.section	.note.GNU-stack,"",@progbits
